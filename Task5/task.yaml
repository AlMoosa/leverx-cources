swagger: "2.0"
info:
  version: "1.0.0"
  title: "Swagger task5"
basePath: "/api"
tags:
- name: "Student"
- name: "Room"
paths:
  /students/{studentId}:
    put:
      tags:
      - "Student"
      summary: "Updating a student"
      description: ""
      consumes:
      - "application/json"
      - "application/xml"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "studentId"
        in: "path"
        description: "ID of a student"
        required: true
        type: "integer"
        format: "int64"
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/Student"
      responses:
        400:
          description: "Invalid student ID"
        404:
          description: "Student is not found"
        200:
          description: "Student is updated"
          
    get:
      tags:
      - "Student"
      summary: "Getting a student"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "studentId"
        in: "path"
        description: "ID of a student"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "Student is returned"
          schema:
            $ref: "#/definitions/Student"
        404:
          description: "Student is not found"
          
    delete:
      tags:
      - "Student"
      summary: "Deleting a student"
      description: ""
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "studentId"
        in: "path"
        description: "ID of Student"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "Student is deleted"
        404:
          description: "Student is not found"
  /students:
    post:
      tags:
      - "Student"
      summary: "Adding a new student"
      description: ""
      consumes:
      - "application/json"
      - "application/xml"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/Student"
      responses:
        201:
          description: "Student is created"
        406:
          description: "Student with such id has already created"
    get:
      tags:
      - "Student"
      summary: "Getting all students"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - $ref: "#/parameters/skipParam"
      - $ref: "#/parameters/limitParam"
      responses:
        200:
          description: "Rooms are returned"
          schema:
            $ref: "#/definitions/Students"
  
        400:
          description: "Query parameters are incorrect"
  
  /rooms/{roomId}:
    put:
      tags:
      - "Room"
      summary: "Updating a room"
      description: ""
      operationId: "updateRoom"
      consumes:
      - "application/json"
      - "application/xml"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "roomId"
        in: "path"
        description: "ID of the room"
        required: true
        type: "integer"
        format: "int64"
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/Room"
      responses:
        400:
          description: "Invalid ID"
        404:
          description: "Room is not found"
        200:
          description: "Room is updated"
          
    get:
      tags:
      - "Room"
      summary: "Getting a room"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "roomId"
        in: "path"
        description: "ID of Room"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "Room is returned"
          schema:
            $ref: "#/definitions/Room"
        404:
          description: "Room is not found"
          
    delete:
      tags:
      - "Room"
      summary: "Deleting a room"
      description: ""
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "roomId"
        in: "path"
        description: "ID of Room"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "Room is deleted"
        404:
          description: "Room is not found"
  /rooms/{roomId}/students:
    get:
      tags:
      - "Room"
      summary: "Getting students of the room"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "roomId"
        in: "path"
        description: "ID of the Room"
        required: true
        type: "integer"
        format: "int64"
      - $ref: "#/parameters/skipParam"
      - $ref: "#/parameters/limitParam"
      
      responses:
        200:
          description: "Students of the room are returned"
          schema:
            $ref: "#/definitions/Students"
        404:
          description: "Room doesn't exists"

  /rooms:
    post:
      tags:
      - "Room"
      summary: "Adding a new room"
      description: ""
      operationId: "addRoom"
      consumes:
      - "application/json"
      - "application/xml"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/Room"
      responses:
        200:
          description: "Room is created"
        400:
          description: "Room with such id already exists"
    get:
      tags:
      - "Room"
      summary: "Getting rooms"
      
      consumes:
      - "application/xml"
      - "application/json"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - $ref: "#/parameters/skipParam"
      - $ref: "#/parameters/limitParam"
      
      responses:
        200:
          description: "Rooms are returned"
          schema:
            $ref: "#/definitions/Rooms"
  
definitions:
  Student:
    type: "object"
    properties:
      id:
        type: "integer"
        format: int64
      name:
        type: "string"
      room:
        type: "integer"
        format: int64
      birthday:
        type: "string"
        format: date-time
      sex:
        type: "string"
    xml:
      name: "Student"
  Room:
    type: "object"
    properties:
      id:
        type: "integer"
        format: int64
      name:
        type: "string"
    xml:
      name: "Room"
  
  Rooms:
    properties:
      paging:
        type: object
        properties:
          skip:
            type: integer
          limit: 
            type: integer
          count: 
            type: integer
      data:
        type: array
        items:
          $ref: '#/definitions/Room'
    required:
      - paging
      - data
  Students:
    properties:
      paging:
        type: object
        properties:
          skip:
            type: integer
          limit: 
            type: integer
          count: 
            type: integer
      data:
        type: array
        items:
          $ref: '#/definitions/Student'
    required:
      - paging
      - data
      
parameters:
  skipParam:
    name: skip
    in: query
    description: number of items to skip
    required: false
    type: integer
    format: int32
    minimum: 0
  limitParam:
    name: limit
    in: query
    description: max records to return
    required: false
    type: integer
    format: int32
    maximum: 100
    minimum: 0